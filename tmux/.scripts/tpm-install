#!/usr/bin/env bash

INDEX="$TMUX_PLUGIN_MANAGER_PATH/index.tmux"

TPM_DIR="$TMUX_PLUGIN_MANAGER_PATH/tpm"
SCRIPTS_DIR="$TPM_DIR/scripts"
HELPERS_DIR="$SCRIPTS_DIR/helpers"

source "$HELPERS_DIR/plugin_functions.sh"
source "$HELPERS_DIR/utility.sh"

if [ "$1" == "--tmux-echo" ]; then # tmux-specific echo functions
  source "$HELPERS_DIR/tmux_echo_functions.sh"
else # shell output functions
  source "$HELPERS_DIR/shell_echo_functions.sh"
fi

# Add plugin to index
enlist_plugin () {
  local plugin="$1"

  local index_path="$(tpm_path)index.tmux"
  local cmd="set -g @plugin '$plugin'"

  echo $cmd >> $index_path
  local index=$(sort $index_path)
  echo "$index" > $index_path
}

callback_success () {
  local plugin="$1"
  local plugin_name="$(plugin_name_helper "$plugin")"

  enlist_plugin $plugin
  echo_ok "  \"$plugin_name\" download success"
}

callback_fail () {
  local plugin="$1"
  local plugin_name="$(plugin_name_helper "$plugin")"

  echo_err "  \"$plugin_name\" download fail"
}

##

clone() {
  local plugin="$1"
  cd "$(tpm_path)" &&
    GIT_TERMINAL_PROMPT=0 git clone --recursive "$plugin" >/dev/null 2>&1
}

# tries cloning:
# 1. plugin name directly - works if it's a valid git url
# 2. expands the plugin name to point to a github repo and tries cloning again

clone_plugin() {
  local plugin="$1"
  clone "$plugin" ||
    clone "https://git::@github.com/$plugin"
}

# clone plugin and produce output

install_plugin() {
  local plugin="$1"
  local plugin_name="$(plugin_name_helper "$plugin")"

  if plugin_already_installed "$plugin"; then
    echo_ok "Already installed \"$plugin_name\""
  else
    echo_ok "Installing \"$plugin_name\""
    clone_plugin "$plugin" &&
      callback_success $plugin ||
      echo_err "  \"$plugin_name\" download fail"
  fi
}

install_plugins() {
  for plugin in $@; do
    install_plugin "$plugin"
  done
}

verify_tpm_path_permissions() {
  local path="$(tpm_path)"
  # check the write permission flag for all users to ensure
  # that we have proper access
  [ -w "$path" ] ||
    echo_err "$path is not writable!"
}

main() {
  ensure_tpm_path_exists
  verify_tpm_path_permissions

  local $plugins

  if [ ! -z $1 ] ;
  then
    install_plugins $@
  else
    install_plugins $(tpm_plugins_list_helper)
  fi

  exit_value_helper
}

main $@
